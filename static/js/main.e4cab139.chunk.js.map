{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Director","useRouteMatch","path","url","className","to","ProjectManger","TeamLeader","Trainee","TraineeChildComponent","QueryParams","URLSearchParams","useLocation","search","get","ReactModule","Angular","Net","Php","DetailPrefix","App","Card","bg","Header","Exact","exact","Footer","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e4cab139.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Card from 'react-bootstrap/Card'\r\nimport {BrowserRouter as Router, Link, Switch, Route ,useRouteMatch,useParams,useLocation} from 'react-router-dom';\r\n\r\nfunction Title(){\r\n  return(\r\n    <h1 className=\"text-center py-3\"> The Details of Employees of one-Tech</h1>\r\n  )\r\n}\r\n\r\nfunction Director()\r\n{\r\n  const {path,url} = useRouteMatch();\r\n  return(\r\n    <div>\r\n      <h3 className=\"text-danger\">Director's Name</h3>\r\n        <nav><Link to={`${url}/divyesh`} className=\"text-white\">divyesh</Link></nav>\r\n      <Switch>\r\n        <Route path={`${path}/divyesh`}></Route>\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction ProjectManger()\r\n{\r\n  const {path,url} = useRouteMatch();\r\n  return(\r\n    <div>\r\n      <h3 className=\"text-danger\">ProjectManger's Name</h3>\r\n        <nav><Link to={`${url}/kuldip`} className=\"text-white\">kuldip</Link></nav>\r\n      <Switch>\r\n        <Route path={`${path}/kuldip`}></Route>\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction TeamLeader()\r\n{\r\n  const {path,url} = useRouteMatch();\r\n  return(\r\n    <div>\r\n      <h3 className=\"text-danger\">TeamLeader's Name</h3>\r\n        <nav><Link to={`${url}/jay`} className=\"text-white\">Jay</Link></nav>\r\n      <Switch>\r\n        <Route path={`${path}/jay`}></Route>\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction Trainee()\r\n{\r\n  const {path,url} = useRouteMatch();\r\n  return(\r\n    <div>\r\n      <h3 className=\"text-danger\">Trainee's Name</h3>\r\n        <nav><Link to={`${url}/jaiman/?pagenumber/?sorting`} className=\"text-white\">Jaiman</Link></nav>\r\n      <Switch>\r\n        <Route path={`${path}/jaiman`}><TraineeChildComponent/></Route>\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\nfunction useQuery(){\r\n  //?pagenumber=10&sorting=firstname\r\n   return new URLSearchParams(useLocation().search)\r\n}\r\n\r\nfunction TraineeChildComponent(){\r\n  const QueryParams = useQuery();\r\n  return(\r\n    <div>\r\n      <h1>You are visiting page with pageNumber:{QueryParams.get('pagenumber')}</h1>\r\n  <h1>You are visiting page with sorting:{QueryParams.get('sorting')}</h1>\r\n    </div>  \r\n  )\r\n}\r\n\r\nfunction ReactModule()\r\n{\r\n  return(\r\n    <div>React Framework</div>\r\n  )\r\n}\r\n\r\nfunction Angular()\r\n{\r\n  return(\r\n    <div>Angular Framework</div>\r\n  )\r\n}\r\n\r\nfunction Net()\r\n{\r\n  return(\r\n    <div>.net Coding</div>\r\n  )\r\n}\r\n\r\nfunction Php()\r\n{\r\n  return(\r\n    <div>php Coding</div>\r\n  )\r\n}\r\n\r\nfunction DetailPrefix(){\r\n  return(\r\n    <div>Hello from:</div>\r\n  )\r\n}\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Card bg='info'>\r\n    <div>\r\n    <Router>\r\n    <Card.Header className='d-flex justify-content-center align-items-center mx-auto'>\r\n     \r\n        \r\n    <nav className=\"w-50 d-flex justify-content-between align-items-center\">\r\n      <Link to='/director' className='text-white'>Director</Link>\r\n      <Link to='/project-Manager' className='text-white'>Project Manager</Link>\r\n      <Link to='/team-leader' className='text-white'>Team Leader</Link>\r\n      <Link to='/trainee' className='text-white'>Trainee</Link>\r\n     \r\n    </nav>  \r\n  \r\n    </Card.Header>\r\n  \r\n    <div className='text-center'>\r\n    <Link to='/' className=\"text-white\">Refresh</Link>  \r\n    <Switch>\r\n      <Route path='/director'><Director/></Route>\r\n      <Route path='/project-Manager'><ProjectManger/></Route>\r\n      <Route path='/team-leader'><TeamLeader/></Route>\r\n      <Route path='/trainee'><Trainee/></Route>\r\n      <Route Exact path='/'></Route>\r\n    </Switch>\r\n    \r\n    </div> \r\n  \r\n    <div className='text-center'>\r\n    <Switch>\r\n      <Route exact path='/react'><DetailPrefix/><ReactModule/></Route>\r\n      <Route path='/angular'><DetailPrefix/><Angular/></Route>\r\n      <Route path='/.net'><DetailPrefix/><Net/></Route>\r\n      <Route path='/php'><DetailPrefix/><Php/></Route>\r\n    </Switch>\r\n    </div> \r\n    <Card.Footer className='d-flex justify-content-center align-items-center mx-auto'>     \r\n       {/* The Details of Employees of one-Tech */}   \r\n    <nav className=\"w-50 d-flex justify-content-between align-items-center\">\r\n      <Link to='/react' className='text-white'>React</Link>\r\n      <Link to='/angular' className='text-white'>Angular</Link>\r\n      <Link to='/.net' className='text-white'>.Net</Link>\r\n      <Link to='/php' className='text-white'>Php</Link>\r\n    </nav>  \r\n  \r\n    </Card.Footer>\r\n  \r\n    </Router>  \r\n  \r\n    </div>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport Apps from './Component/Example'\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}